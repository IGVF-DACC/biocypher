Title: BioCypher graph schema configuration file

# This configuration file establishes the hierarchy and connectivity in a newly
# set-up BioCypher property graph database. Naming should adhere to Biolink
# nomenclature (available at https://biolink.github.io/biolink-model/ or via 
# the python module 'biolink-model-toolkit').

# The BioCypher YAML file specifies only the leaves of the hierarchy tree of
# the desired graph; the hierarchical structure of entities will be derived 
# from the Biolink model. Thus, only the immediate constituents of the graph
# need to be specified in the schema config.


# ---
# "Named Things"
# ---
# The implementation of named things is fairly straightforward, since they are
# usually represented in node form, which is also the Biolink recommendation.
# The same is not true for associations.
#
# A little more complex is the representation of aggregates of named things, 
# for instance in the case of functional protein complexes. These are represented
# by so-called "mixins", which are not officially part of the hierarchy.

# regular node
Protein:
  represented_as: node
  preferred_id: UniProtKB 
  label_in_input: protein 
  properties:
    name: str
    score: float
    taxon: int

microRNA:
  represented_as: node
  preferred_id: MIR 
  label_in_input: mirna 

MacromolecularComplexMixin:
  represented_as: node
  preferred_id: custom 
  label_in_input: complex 

# virtual leaves for multiple inputs
Pathway:
  represented_as: node
  preferred_id: [REACT, WIKIPATHWAYS] 
  label_in_input: [reactome, wikipathways] 

# merge muliple inputs
Gene:
  represented_as: node
  preferred_id: HGNC
  label_in_input: [hgnc, uniprot] 

# ad hoc child
SideEffect:
  is_a: PhenotypicFeature
  represented_as: node
  preferred_id: HGNC
  label_in_input: [hgnc, uniprot] 

# ---
# Associations
# ---
# Associations are not supposed to be represented in node form as per the 
# specifications of Biolink. However, in an analytic context, it often makes 
# sense to represent interactions as nodes in Neo4j, because it enables, for
# instance, the annotation of a relationship with a publication as source of
# evidence (also known as reification in the knowledge graph world). 

# The Biolink specifications for these types of relationships do 
# not go into depth; for example, the hierarchy for molecular interactions
# (ie, "associations") ends at "PairwiseMolecularInteraction", there are no 
# explicit terms for protein-protein-interaction, phosphorylation, miRNA-
# targeting, etc. Biolink proposes to use interaction identifiers from 
# ontologies, such as https://www.ebi.ac.uk/ols/ontologies/mi/.


# added to custom biolink
PostTranslationalInteraction:
  represented_as: node
  label_as_edge: INTERACTS_POST_TRANSLATIONAL
  preferred_id: custom
  source: Protein 
  target: Protein
  label_in_input: post_translational

Phosphorylation:
  represented_as: edge
  preferred_id: custom
  source: Protein
  target: Protein
  label_in_input: phosphorylation

# merge edges
GeneToDiseaseAssociation:
  represented_as: edge
  label_as_edge: PERTURBED_IN_DISEASE
  preferred_id: custom
  source: Protein
  target: Disease
  label_in_input: [protein_disease, gene_disease]

# multiple inheritance
MutationToTissueAssociation:
  is_a: [GenotypeToTissueAssociation, EntityToTissueAssociation, Association]
  represented_as: edge
  label_as_edge: Is_Mutated_In
  preferred_id: custom
  source: Gene
  target: Tissue
  label_in_input: Gene_Is_Mutated_In_Cell_Tissue


# multiple input to multiple virtual leaves
VariantToGeneAssociation: # -> Known.Variant... and Somatic.Variant...
  represented_as: node
  preferred_id: custom
  source: [Known.SequenceVariant, Somatic.SequenceVariant]
  target: Gene
  label_in_input: [
    VARIANT_FOUND_IN_GENE_Known_variant_Gene,
    VARIANT_FOUND_IN_GENE_Somatic_mutation_Gene
  ]